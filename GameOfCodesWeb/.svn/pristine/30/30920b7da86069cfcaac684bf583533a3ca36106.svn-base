package com.misys.gameofcodes.dao;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.bson.BasicBSONObject;
import org.bson.types.ObjectId;

import com.misys.gameofcodes.connection.CollectionProvider;
import com.misys.gameofcodes.model.Hero;
import com.misys.gameofcodes.model.House;
import com.misys.gameofcodes.service.HeroService;
import com.misys.gameofcodes.service.HouseService;
import com.misys.gameofcodes.utility.EncoderUtility;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;

public class HeroesDAOImpl implements HeroesDAO {
	
	private CollectionProvider collectionProvider;
	
	public HeroesDAOImpl ()
	{
		collectionProvider = new CollectionProvider();
	}
	public Map<String, Hero> getAllHeroes() {
        
		DBCursor cursor = collectionProvider.getHeroCollection().find();
        Map<String, Hero> heroes = new HashMap<String, Hero>();
        while(cursor.hasNext()){
        	DBObject dbhero = cursor.next();
        	System.out.println(dbhero.toString());
        	Hero hero = getHero(dbhero);
    		heroes.put(hero.getId().toString(), hero);
        }
		return heroes;
	}
	
	public Hero getHero(Hero hero) {
	    BasicDBObject query = new BasicDBObject();
	    query.put("_id", hero.getId());
	    DBObject dbHero = collectionProvider.getHeroCollection().findOne(query);
	    return getHero(dbHero);
	}
	
	public Hero getHero(DBObject dbhero) {
		Hero hero = new Hero();
    	ObjectId objId = (ObjectId) dbhero.get("_id");
    	hero.setId(objId);
    	hero.setUsername(dbhero.get("username").toString());
    	hero.setName(dbhero.get("name").toString());
    	hero.setEmail(dbhero.get("email").toString());
    	hero.setStoryPoints(EncoderUtility.getZeroIfNull((dbhero.get("story_points").toString())));
    	hero.setIsActive(EncoderUtility.getEmptyIfNull(dbhero.get("is_active").toString()));
		
    	return hero;
	}

	public void addHero(Hero hero) {
        DBCollection heroCollection = collectionProvider.getHeroCollection();
		BasicDBObject heroObject = new BasicDBObject("username", hero.getUsername())
			  .append("name", hero.getName())
      		  .append("email", hero.getEmail())
			  .append("story_points", 0)
			  .append("is_active", 'Y');
		heroCollection.insert(heroObject);
	}

	public void updateHero(Hero hero) {
		DBCollection heroCollection = collectionProvider.getHeroCollection();
	    BasicDBObject query = new BasicDBObject();
	    query.put("_id", hero.getId());

	    DBObject dbHero = collectionProvider.getHeroCollection().findOne(query);
	    	dbHero.put("name",hero.getName());
	    	heroCollection.update(query, dbHero); 
	}
	

	public void deleteHero(Hero hero) {
		DBCollection heroCollection = collectionProvider.getHeroCollection();
		BasicDBObject query = new BasicDBObject("username", hero.getUsername());
		System.out.println(heroCollection.remove(query));
		  
	}

	public void setInactiveHero(Hero hero) {
		
	}

	@Override
	public void updateHeroHouse(Hero hero, House house) {
		DBCollection heroCollection = collectionProvider.getHeroCollection();
	    BasicDBObject query = new BasicDBObject();
	    query.put("_id", hero.getId());
	    house = HouseService.getHouseService().fetchHouse(house);
		BasicDBObject houseObject = new BasicDBObject("_id",house.getId())
				.append("housename", house.getHousename())
				.append("domain", house.getDomain())
				.append("banner", house.getBanner());
	    
	    DBObject dbHero = collectionProvider.getHeroCollection().findOne(query);
	    dbHero.put("house", houseObject);
	    
		System.out.println(heroCollection.update(query, dbHero));
		
	}
}

